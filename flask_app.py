from flask import Flask, request, jsonify, render_template
from openai import OpenAI
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
import logging
import requests
import json
import re
import threading
import time
import hashlib
import socket
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger

# ‚úÖ .env Î°úÎìú
load_dotenv()

# ‚úÖ Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚úÖ ÌôòÍ≤Ω ÌôïÏù∏ Î°úÍ∑∏
if os.getenv('RAILWAY_ENVIRONMENT'):
    logger.info("‚úÖ Running in Railway production environment")
else:
    logger.info("‚úÖ Running in local development environment")

# ‚úÖ Flask Ïï± Ï¥àÍ∏∞Ìôî
app = Flask(__name__)

# ‚úÖ OpenAI ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÑ§Ï†ï
try:
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if not openai_api_key:
        raise ValueError("Missing OPENAI_API_KEY")
    client = OpenAI(api_key=openai_api_key)
    logger.info("‚úÖ OpenAI client initialized successfully")
except Exception as e:
    logger.error(f"‚ùå OpenAI client initialization failed: {e}")
    client = None

# ‚úÖ LINE ÏÑ§Ï†ï ÌôïÏù∏
LINE_TOKEN = os.getenv("LINE_TOKEN") or os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_SECRET = os.getenv("LINE_CHANNEL_SECRET") or os.getenv("LINE_SECRET")

if not LINE_TOKEN:
    logger.error("‚ùå LINE_TOKEN or LINE_CHANNEL_ACCESS_TOKEN not found!")
if not LINE_SECRET:
    logger.error("‚ùå LINE_SECRET or LINE_CHANNEL_SECRET not found!")

# ‚úÖ Google API ÏÑ§Ï†ï
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_DOC_ID = os.getenv("GOOGLE_DOC_ID")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")
UPDATE_INTERVAL_MINUTES = int(os.getenv("UPDATE_INTERVAL_MINUTES", "5"))

# ‚úÖ Ï†ÑÏó≠ Î≥ÄÏàòÎ°ú Îç∞Ïù¥ÌÑ∞ÏôÄ Ìï¥Ïãú Ï†ÄÏû•
current_sheet_text = ""
current_doc_text = ""
sheet_hash = ""
doc_hash = ""
last_update_time = datetime.now()
scheduler = None

# ‚úÖ Google ÏãúÌä∏ Î∞è Î¨∏ÏÑú Í∏∞Î≥∏ Ï†ïÎ≥¥
saboo_thai_info = """
SABOO THAILAND ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå - ‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó:
- SABOO THAILAND ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏™‡∏ö‡∏π‡πà‡∏£‡∏π‡∏õ‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
- ‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏õ‡∏µ 2008 ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏ö‡∏π‡πà‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢
- ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏•‡∏Å‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏Å‡∏ß‡πà‡∏≤ 20 ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å

‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤:
- ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà (‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô): 55/20 ‡∏´‡∏°‡∏π‡πà 4 ‡∏ï‡∏≥‡∏ö‡∏•‡∏ö‡∏∂‡∏á‡∏Ñ‡∏≥‡∏û‡∏£‡πâ‡∏≠‡∏¢ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏•‡∏≥‡∏•‡∏π‡∏Å‡∏Å‡∏≤ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ 12150
- SABOO THAILAND SHOP: ‡∏°‡∏¥‡∏Å‡∏ã‡πå ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏ä‡∏±‡πâ‡∏ô 2 ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 8 ‡∏ñ‡∏ô‡∏ô‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£ 3 ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10900
- ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: 02-159-9880, 085-595-9565 / 062-897-8962

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:
- ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: saboothailand@gmail.com
- ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: www.saboothailand.com
- ‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡∏°‡∏≠‡∏•‡∏•‡πå: www.saboomall.com

‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå:
- Shopee: https://shopee.co.th/thailandsoap
- Lazada: https://www.lazada.co.th/shop/saboo-thailand
- YouTube: https://www.youtube.com/@saboothailand.official
- Instagram: https://www.instagram.com/saboothailand.official/
- TikTok: https://www.tiktok.com/@saboothailand.official
- ‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å: https://books.saboothailand.com/books/bxte/#p=1

‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏´‡∏•‡∏±‡∏Å:
- ‡∏™‡∏ö‡∏π‡πà‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ (‡∏™‡∏ö‡∏π‡πà‡∏£‡∏π‡∏õ‡∏ú‡∏•‡πÑ‡∏°‡πâ)
- ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥ (‡∏ö‡∏≤‡∏ò‡∏ö‡∏≠‡∏°‡∏ö‡πå ‡∏ö‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏ö‡∏≤‡∏ò)
- ‡∏™‡πÄ‡∏õ‡∏£‡∏¢‡πå‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
- ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Å‡∏•‡∏¥‡πà‡∏ô
- ‡∏™‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ä‡∏∏‡∏î‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥
"""

# ‚úÖ ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ìè¨Ìä∏ Ï∞æÍ∏∞ Ìï®Ïàò
def find_free_port():
    """ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ìè¨Ìä∏ Ï∞æÍ∏∞"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('', 0))
            s.listen(1)
            port = s.getsockname()[1]
        return port
    except:
        return 5000

# ‚úÖ Google Sheets APIÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ (ÏàòÏ†ïÎêú Î≤ÑÏ†Ñ)
def fetch_google_sheet_data():
    """Google SheetsÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ - Í∞úÏÑ†Îêú Î≤ÑÏ†Ñ"""
    try:
        logger.info("üîç Attempting to fetch Google Sheets data...")
        
        # Î∞©Î≤ï 1: gspread ÏÇ¨Ïö© (ÏÑúÎπÑÏä§ Í≥ÑÏ†ï ÌïÑÏöî)
        if GOOGLE_CREDENTIALS_JSON:
            try:
                import gspread
                from oauth2client.service_account import ServiceAccountCredentials
                
                creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
                scope = ['https://spreadsheets.google.com/feeds',
                        'https://www.googleapis.com/auth/drive']
                creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
                gc = gspread.authorize(creds)
                
                sheet = gc.open_by_key(GOOGLE_SHEET_ID).sheet1
                all_values = sheet.get_all_values()
                
                # ÏãúÌä∏ Îç∞Ïù¥ÌÑ∞Î•º ÌÖçÏä§Ìä∏Î°ú Î≥ÄÌôò
                sheet_content = ""
                for row in all_values:
                    row_text = " | ".join(str(cell) for cell in row if str(cell).strip())
                    if row_text.strip():
                        sheet_content += row_text + "\n"
                
                logger.info(f"‚úÖ Google Sheets data fetched via gspread: {len(sheet_content)} chars")
                logger.info(f"üìä Preview: {sheet_content[:200]}...")
                return sheet_content.strip()
                
            except ImportError:
                logger.warning("‚ö†Ô∏è gspread not installed, trying REST API")
            except Exception as e:
                logger.error(f"‚ùå gspread failed: {e}")
        
        # Î∞©Î≤ï 2: REST API ÏÇ¨Ïö© (Í≥µÍ∞ú Î¨∏ÏÑúÏù∏ Í≤ΩÏö∞Îßå)
        if GOOGLE_API_KEY and GOOGLE_SHEET_ID:
            try:
                # ÏãúÌä∏Î•º Í≥µÍ∞úÎ°ú ÏÑ§Ï†ïÌï¥Ïïº API ÌÇ§Î°ú Ï†ëÍ∑º Í∞ÄÎä•
                url = f"https://sheets.googleapis.com/v4/spreadsheets/{GOOGLE_SHEET_ID}/values/A:Z?key={GOOGLE_API_KEY}"
                
                logger.info(f"üåê Trying REST API: {url}")
                response = requests.get(url, timeout=15)
                
                logger.info(f"üì° API Response Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    values = data.get('values', [])
                    
                    # ÏãúÌä∏ Îç∞Ïù¥ÌÑ∞Î•º ÌÖçÏä§Ìä∏Î°ú Î≥ÄÌôò
                    sheet_content = ""
                    for row in values:
                        row_text = " | ".join(str(cell) for cell in row if str(cell).strip())
                        if row_text.strip():
                            sheet_content += row_text + "\n"
                    
                    logger.info(f"‚úÖ Google Sheets data fetched via REST API: {len(sheet_content)} chars")
                    logger.info(f"üìä Preview: {sheet_content[:200]}...")
                    return sheet_content.strip()
                elif response.status_code == 403:
                    logger.error("‚ùå Google Sheets API - Access denied. Make sure the sheet is publicly accessible")
                    logger.info("üí° To fix: Share the Google Sheet with 'Anyone with the link can view'")
                elif response.status_code == 404:
                    logger.error("‚ùå Google Sheets API - Sheet not found. Check GOOGLE_SHEET_ID")
                else:
                    logger.error(f"‚ùå Google Sheets REST API error: {response.status_code}")
                    logger.error(f"‚ùå Error response: {response.text}")
            except Exception as e:
                logger.error(f"‚ùå REST API request failed: {e}")
        
        logger.warning("‚ö†Ô∏è No Google Sheets credentials or API key configured, using fallback data")
        return None
            
    except Exception as e:
        logger.error(f"‚ùå Error fetching Google Sheets data: {e}")
        import traceback
        logger.error(f"‚ùå Full traceback: {traceback.format_exc()}")
        return None

# ‚úÖ Google Docs Ìè¥Î∞± (Í∞ÑÎã®Ìïú ÌÖçÏä§Ìä∏ ÌååÏùºÎ°ú ÎåÄÏ≤¥)
def fetch_google_doc_data():
    """Google Docs ÎåÄÏã† Î°úÏª¨ ÌååÏùºÏù¥ÎÇò Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©"""
    try:
        logger.info("üîç Loading document data...")
        
        # Î°úÏª¨ ÌååÏùºÏù¥ ÏûàÎã§Î©¥ ÏÇ¨Ïö©
        if os.path.exists('company_info.txt'):
            with open('company_info.txt', 'r', encoding='utf-8') as f:
                content = f.read().strip()
                logger.info(f"‚úÖ Local document file loaded: {len(content)} chars")
                return content
        
        # Í∏∞Î≥∏ ÌöåÏÇ¨ Ï†ïÎ≥¥ Î∞òÌôò
        default_info = """
SABOO THAILAND - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤:
- ‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏õ‡∏µ 2008 ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏ß‡∏¥‡∏™‡∏±‡∏¢‡∏ó‡∏±‡∏®‡∏ô‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏™‡∏ö‡∏π‡πà‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
- ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏∏‡∏Å‡πÄ‡∏ö‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏ö‡∏π‡πà‡∏£‡∏π‡∏õ‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
- ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≤‡∏Å‡∏•‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å

‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:
- ‡∏ú‡∏•‡∏¥‡∏ï‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ 100%
- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
- ‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≤‡∏Å‡∏•
- ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°

‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:
- ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
- ‡∏£‡∏±‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (OEM/ODM)
- ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏¥‡∏®
- ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ü‡∏£‡∏µ
"""
        logger.info(f"‚úÖ Using default document info: {len(default_info)} chars")
        return default_info.strip()
            
    except Exception as e:
        logger.error(f"‚ùå Error loading document data: {e}")
        return "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö SABOO THAILAND"

# ‚úÖ Îç∞Ïù¥ÌÑ∞ Ìï¥Ïãú Í≥ÑÏÇ∞
def calculate_hash(data):
    """Îç∞Ïù¥ÌÑ∞Ïùò MD5 Ìï¥Ïãú Í≥ÑÏÇ∞"""
    if not data:
        return ""
    return hashlib.md5(data.encode('utf-8')).hexdigest()

# ‚úÖ Google Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ ÌôïÏù∏ Î∞è Í∞±Ïã†
def check_and_update_google_data():
    """Google Sheets/Docs Îç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÌôïÏù∏ Î∞è ÏóÖÎç∞Ïù¥Ìä∏"""
    global current_sheet_text, current_doc_text, sheet_hash, doc_hash, last_update_time
    
    try:
        logger.info("üîÑ Checking for data updates...")
        update_occurred = False
        
        # Sheets Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
        try:
            new_sheet_data = fetch_google_sheet_data()
            if new_sheet_data and len(new_sheet_data.strip()) > 50:
                new_sheet_hash = calculate_hash(new_sheet_data)
                if new_sheet_hash != sheet_hash:
                    logger.info("üìä Google Sheets data updated!")
                    current_sheet_text = new_sheet_data
                    sheet_hash = new_sheet_hash
                    update_occurred = True
                else:
                    logger.info("üìä Google Sheets data unchanged")
            else:
                logger.info("üìä Using existing sheet data")
        except Exception as e:
            logger.error(f"‚ùå Error checking Google Sheets: {e}")
        
        # Docs Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
        try:
            new_doc_data = fetch_google_doc_data()
            if new_doc_data and len(new_doc_data.strip()) > 20:
                new_doc_hash = calculate_hash(new_doc_data)
                if new_doc_hash != doc_hash:
                    logger.info("üìÑ Document data updated!")
                    current_doc_text = new_doc_data
                    doc_hash = new_doc_hash
                    update_occurred = True
                else:
                    logger.info("üìÑ Document data unchanged")
        except Exception as e:
            logger.error(f"‚ùå Error checking document: {e}")
        
        if update_occurred:
            last_update_time = datetime.now()
            logger.info(f"‚úÖ Data update completed at {last_update_time.strftime('%Y-%m-%d %H:%M:%S')}")
        else:
            logger.info(f"‚ÑπÔ∏è No data changes detected at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
    except Exception as e:
        logger.error(f"‚ùå Error in check_and_update_google_data: {e}")

# ‚úÖ Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
def initialize_google_data():
    """Ïï± ÏãúÏûëÏãú Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞ Î°úÎìú"""
    global current_sheet_text, current_doc_text, sheet_hash, doc_hash
    
    logger.info("üöÄ Initializing data...")
    
    # Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
    current_sheet_text = saboo_thai_info
    current_doc_text = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö SABOO THAILAND"
    
    # ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏ Î∞è Î°úÍ∑∏
    logger.info(f"üîß Environment check:")
    logger.info(f"   - GOOGLE_SHEET_ID: {'‚úÖ' if GOOGLE_SHEET_ID else '‚ùå'}")
    logger.info(f"   - GOOGLE_DOC_ID: {'‚úÖ' if GOOGLE_DOC_ID else '‚ùå'}")
    logger.info(f"   - GOOGLE_API_KEY: {'‚úÖ' if GOOGLE_API_KEY else '‚ùå'}")
    logger.info(f"   - GOOGLE_CREDENTIALS_JSON: {'‚úÖ' if GOOGLE_CREDENTIALS_JSON else '‚ùå'}")
    
    # Google APIÎ°ú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÎèÑ
    try:
        sheet_data = fetch_google_sheet_data()
        if sheet_data and len(sheet_data.strip()) > 50:
            current_sheet_text = sheet_data
            logger.info("‚úÖ Google Sheets data loaded successfully")
        else:
            logger.info("‚ÑπÔ∏è Using fallback sheet data")
        
        doc_data = fetch_google_doc_data()
        if doc_data and len(doc_data.strip()) > 20:
            current_doc_text = doc_data
            logger.info("‚úÖ Document data loaded successfully")
        else:
            logger.info("‚ÑπÔ∏è Using fallback document data")
    except Exception as e:
        logger.error(f"‚ùå Error during data initialization: {e}")
        logger.info("‚ÑπÔ∏è Continuing with fallback data")
    
    # Ï¥àÍ∏∞ Ìï¥Ïãú Í≥ÑÏÇ∞
    sheet_hash = calculate_hash(current_sheet_text)
    doc_hash = calculate_hash(current_doc_text)
    
    logger.info(f"üìä Final sheet data length: {len(current_sheet_text)} chars")
    logger.info(f"üìÑ Final doc data length: {len(current_doc_text)} chars")

# ‚úÖ Ïä§ÏºÄÏ§ÑÎü¨ ÏÑ§Ï†ï
def setup_scheduler():
    """Î∞±Í∑∏ÎùºÏö¥Îìú Ïä§ÏºÄÏ§ÑÎü¨ ÏÑ§Ï†ï"""
    global scheduler
    try:
        if scheduler and scheduler.running:
            scheduler.shutdown()
            
        scheduler = BackgroundScheduler(daemon=True)
        
        scheduler.add_job(
            func=check_and_update_google_data,
            trigger=IntervalTrigger(minutes=UPDATE_INTERVAL_MINUTES),
            id='google_data_update',
            name='Check Google Data Updates',
            replace_existing=True,
            max_instances=1
        )
        
        scheduler.start()
        logger.info(f"‚è∞ Scheduler started - checking every {UPDATE_INTERVAL_MINUTES} minutes")
        
        return scheduler
    except Exception as e:
        logger.error(f"‚ùå Failed to setup scheduler: {e}")
        return None

# ‚úÖ GPT ÏãúÏä§ÌÖú Î©îÏãúÏßÄ
SYSTEM_MESSAGE = """
You are a knowledgeable and friendly Thai staff member of SABOO THAILAND.

Always reply in the **same language** the customer uses:
- If the customer speaks Thai, answer in polite and gentle Thai using "‡∏Ñ‡πà‡∏∞" or "‡∏Ñ‡∏∞"
- If the customer speaks English, answer in friendly and professional English
- If the customer speaks Korean, answer in polite Korean
- If another language is used, try to respond in that language

IMPORTANT FALLBACK RULE: If there are any technical issues, errors, or problems that prevent you from accessing proper data or generating appropriate responses, ALWAYS switch to English and provide a helpful response in English, regardless of the customer's original language.

Be warm and helpful like a Thai staff member who truly wants to assist the customer.
Use light emojis üòä to create a friendly and human touch, but do not overuse them.

Use the following product and company information to answer accurately.

Important information to remember:
- SABOO THAILAND was founded in 2008
- First Thai company to create fruit-shaped soap
- Exported to over 20 countries worldwide
- Store location: Mixt Chatuchak, 2nd Floor
- Factory: Pathum Thani
- Phone: 02-159-9880, 085-595-9565
- Website: www.saboothailand.com
- Shopee: shopee.co.th/thailandsoap
"""

# ‚úÖ ÏòÅÏñ¥ Ìè¥Î∞± ÏãúÏä§ÌÖú Î©îÏãúÏßÄ
ENGLISH_FALLBACK_MESSAGE = """
You are a helpful customer service representative for SABOO THAILAND.

Always respond in English when there are technical issues or data problems.
Be friendly, professional, and provide as much helpful information as possible from your basic knowledge.

Key information about SABOO THAILAND:
- Founded in 2008
- First Thai company to create fruit-shaped natural soap
- Exports to over 20 countries worldwide
- Store: Mixt Chatuchak, 2nd Floor, Bangkok
- Phone: 02-159-9880, 085-595-9565
- Website: www.saboothailand.com
- Shopee: shopee.co.th/thailandsoap
- Email: saboothailand@gmail.com

Products: Natural soaps (fruit-shaped), bath products, air fresheners, essential oils, scrubs, bath sets.
"""

# ‚úÖ Ïñ∏Ïñ¥ Í∞êÏßÄ Ìï®Ïàò
def detect_user_language(message):
    """ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄÏùò Ïñ∏Ïñ¥ Í∞êÏßÄ"""
    try:
        # ÌÉúÍµ≠Ïñ¥ Î¨∏Ïûê Ìå®ÌÑ¥
        thai_pattern = r'[\u0E00-\u0E7F]'
        # ÌïúÍµ≠Ïñ¥ Î¨∏Ïûê Ìå®ÌÑ¥  
        korean_pattern = r'[\uAC00-\uD7AF\u1100-\u11FF\u3130-\u318F]'
        
        if re.search(thai_pattern, message):
            return 'thai'
        elif re.search(korean_pattern, message):
            return 'korean'
        else:
            return 'english'  # Í∏∞Î≥∏Í∞í
    except Exception as e:
        logger.error(f"‚ùå Language detection error: {e}")
        return 'english'  # ÏóêÎü¨ Ïãú ÏòÅÏñ¥Î°ú Ìè¥Î∞±

# ‚úÖ ÏòÅÏñ¥ Ìè¥Î∞± ÏùëÎãµ ÏÉùÏÑ±
def get_english_fallback_response(user_message, error_context=""):
    """Î¨∏Ï†ú Î∞úÏÉù Ïãú ÏòÅÏñ¥Î°ú Ìè¥Î∞± ÏùëÎãµ ÏÉùÏÑ±"""
    try:
        if not client:
            return """I apologize, but we're experiencing technical difficulties at the moment. 

Here's some basic information about SABOO THAILAND:
- We're Thailand's first natural fruit-shaped soap manufacturer since 2008
- Store location: Mixt Chatuchak, 2nd Floor, Bangkok
- Phone: 02-159-9880, 085-595-9565
- Website: www.saboothailand.com
- Shopee: shopee.co.th/thailandsoap

Please try again later or contact us directly. Thank you for your understanding! üòä"""
        
        prompt = f"""
The user asked: "{user_message}"

There was a technical issue: {error_context}

Please provide a helpful response in English using basic company information.
"""
        
        completion = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": ENGLISH_FALLBACK_MESSAGE},
                {"role": "user", "content": prompt}
            ],
            max_tokens=600,
            temperature=0.7,
            timeout=20
        )
        
        response_text = completion.choices[0].message.content.strip()
        
        # ÏùëÎãµ ÌíàÏßà Í≤ÄÏÇ¨
        if not response_text or len(response_text.strip()) < 10:
            logger.warning("‚ö†Ô∏è Generated response seems too short")
            return get_english_fallback_response(user_message, "Response generation issue")
        
        # Ï†ÅÏ†àÌïú Ïñ∏Ïñ¥Î°ú ÏùëÎãµÌñàÎäîÏßÄ Í∞ÑÎã® Ï≤¥ÌÅ¨
        if user_language == 'thai' and not re.search(r'[\u0E00-\u0E7F]', response_text):
            logger.warning("‚ö†Ô∏è Expected Thai response but got non-Thai")
            return get_english_fallback_response(user_message, "Language processing issue")
        
        response_text = add_hyperlinks(response_text)
        return response_text
        
    except Exception as e:
        logger.error(f"‚ùå GPT response error: {e}")
        error_context = f"GPT API error: {str(e)[:100]}"
        return get_english_fallback_response(user_message, error_context)

# ‚úÖ LINE Î©îÏãúÏßÄ Ï†ÑÏÜ° Ìï®Ïàò
def send_line_message(reply_token, message):
    """LINE APIÎ°ú Î©îÏãúÏßÄ Ï†ÑÏÜ°"""
    try:
        if not LINE_TOKEN:
            logger.error("‚ùå LINE_TOKEN not available")
            return False
            
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {LINE_TOKEN}"
        }
        
        if isinstance(message, str):
            payload = {
                "replyToken": reply_token,
                "messages": [{"type": "text", "text": message}]
            }
        else:
            payload = {
                "replyToken": reply_token,
                "messages": [message]
            }
        
        response = requests.post(
            "https://api.line.me/v2/bot/message/reply",
            headers=headers,
            json=payload,
            timeout=10
        )
        
        if response.status_code == 200:
            logger.info("‚úÖ LINE message sent successfully")
            return True
        else:
            logger.error(f"‚ùå LINE API error: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Send LINE message error: {e}")
        return False

# ‚úÖ Ïù∏Îç±Ïä§ ÎùºÏö∞Ìä∏
@app.route('/')
def index():
    return render_template('chat.html')

# ‚úÖ Ìó¨Ïä§Ï≤¥ÌÅ¨ (ÏóÖÎç∞Ïù¥Ìä∏ Ï†ïÎ≥¥ Ìè¨Ìï®)
@app.route('/health')
def health():
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "openai": "connected" if client else "disconnected",
        "line_token": "configured" if LINE_TOKEN else "missing",
        "line_secret": "configured" if LINE_SECRET else "missing",
        "google_api": "configured" if GOOGLE_API_KEY else "missing",
        "google_credentials": "configured" if GOOGLE_CREDENTIALS_JSON else "missing",
        "google_sheet_id": "configured" if GOOGLE_SHEET_ID else "missing",
        "google_doc_id": "configured" if GOOGLE_DOC_ID else "missing",
        "last_data_update": last_update_time.isoformat(),
        "update_interval_minutes": UPDATE_INTERVAL_MINUTES,
        "sheet_data_length": len(current_sheet_text),
        "doc_data_length": len(current_doc_text),
        "scheduler_running": scheduler.running if scheduler else False
    })

# ‚úÖ ÏàòÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ìä∏Î¶¨Í±∞ ÏóîÎìúÌè¨Ïù∏Ìä∏
@app.route('/trigger-update')
def trigger_update():
    """ÏàòÎèôÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ Ìä∏Î¶¨Í±∞"""
    try:
        old_sheet_hash = sheet_hash
        old_doc_hash = doc_hash
        
        check_and_update_google_data()
        
        return jsonify({
            "status": "success",
            "timestamp": datetime.now().isoformat(),
            "sheet_updated": sheet_hash != old_sheet_hash,
            "doc_updated": doc_hash != old_doc_hash,
            "last_update": last_update_time.isoformat(),
            "old_sheet_hash": old_sheet_hash[:10] + "..." if old_sheet_hash else "None",
            "new_sheet_hash": sheet_hash[:10] + "..." if sheet_hash else "None",
            "old_doc_hash": old_doc_hash[:10] + "..." if old_doc_hash else "None", 
            "new_doc_hash": doc_hash[:10] + "..." if doc_hash else "None"
        })
    except Exception as e:
        logger.error(f"‚ùå Manual update trigger error: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# ‚úÖ ÎîîÎ≤ÑÍ∑∏Ïö© ÏóîÎìúÌè¨Ïù∏Ìä∏
@app.route('/debug-data')
def debug_data():
    """Îç∞Ïù¥ÌÑ∞ ÏÉÅÌÉú ÎîîÎ≤ÑÍπÖ"""
    try:
        # Ïã§ÏãúÍ∞ÑÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÎèÑ
        fresh_sheet = fetch_google_sheet_data()
        fresh_doc = fetch_google_doc_data()
        
        return jsonify({
            "current_data": {
                "sheet_length": len(current_sheet_text),
                "doc_length": len(current_doc_text),
                "sheet_hash": sheet_hash,
                "doc_hash": doc_hash,
                "last_update": last_update_time.isoformat(),
                "sheet_preview": current_sheet_text[:300] + "..." if len(current_sheet_text) > 300 else current_sheet_text,
                "doc_preview": current_doc_text[:300] + "..." if len(current_doc_text) > 300 else current_doc_text
            },
            "fresh_data": {
                "sheet_length": len(fresh_sheet) if fresh_sheet else 0,
                "doc_length": len(fresh_doc) if fresh_doc else 0,
                "sheet_preview": fresh_sheet[:300] + "..." if fresh_sheet and len(fresh_sheet) > 300 else (fresh_sheet or "No data"),
                "doc_preview": fresh_doc[:300] + "..." if fresh_doc and len(fresh_doc) > 300 else (fresh_doc or "No data"),
                "sheet_hash": calculate_hash(fresh_sheet) if fresh_sheet else "None",
                "doc_hash": calculate_hash(fresh_doc) if fresh_doc else "None"
            },
            "config": {
                "google_sheet_id": GOOGLE_SHEET_ID[:10] + "..." if GOOGLE_SHEET_ID else None,
                "google_doc_id": GOOGLE_DOC_ID[:10] + "..." if GOOGLE_DOC_ID else None,
                "has_api_key": bool(GOOGLE_API_KEY),
                "has_credentials": bool(GOOGLE_CREDENTIALS_JSON),
                "update_interval": UPDATE_INTERVAL_MINUTES,
                "scheduler_running": scheduler.running if scheduler else False
            },
            "comparison": {
                "sheet_data_different": calculate_hash(fresh_sheet) != sheet_hash if fresh_sheet else "Cannot compare",
                "doc_data_different": calculate_hash(fresh_doc) != doc_hash if fresh_doc else "Cannot compare"
            }
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ‚úÖ Ïõπ Ï±ó ÎùºÏö∞Ìä∏ (ÏòÅÏñ¥ Ìè¥Î∞± ÏßÄÏõê)
@app.route('/chat', methods=['POST'])
def chat():
    try:
        user_message = request.json.get('message', '').strip()
        if not user_message:
            return jsonify({"error": "Empty message."}), 400

        # ÏùëÎãµ ÏÉùÏÑ± (ÎÇ¥Î∂ÄÏ†ÅÏúºÎ°ú ÏòÅÏñ¥ Ìè¥Î∞± Ï≤òÎ¶¨Îê®)
        bot_response = get_gpt_response(user_message)
        save_chat(user_message, bot_response)
        
        return jsonify({
            "reply": bot_response,
            "is_html": True,
            "last_data_update": last_update_time.isoformat(),
            "user_language": detect_user_language(user_message)
        })

    except Exception as e:
        logger.error(f"‚ùå Error in /chat: {e}")
        # Ïõπ Ï±ó ÏóêÎü¨ ÏãúÏóêÎèÑ ÏòÅÏñ¥ Ìè¥Î∞±
        fallback_response = get_english_fallback_response(
            user_message if 'user_message' in locals() else "general inquiry", 
            f"Web chat system error: {str(e)[:100]}"
        )
        return jsonify({
            "reply": fallback_response,
            "is_html": True,
            "error": "fallback_mode"
        })

# ‚úÖ LINE Ï±óÎ¥á Webhook
@app.route('/line', methods=['POST'])
def line_webhook():
    """LINE Webhook Ìï∏Îì§Îü¨"""
    try:
        body = request.get_data(as_text=True)
        signature = request.headers.get('X-Line-Signature', '')
        
        logger.info(f"üì® LINE webhook received: {len(body)} bytes")
        
        if not verify_line_signature(body.encode('utf-8'), signature):
            logger.warning("‚ö†Ô∏è Invalid signature, but continuing...")
        
        try:
            webhook_data = json.loads(body)
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå JSON decode error: {e}")
            return "Invalid JSON", 400
        
        events = webhook_data.get("events", [])
        logger.info(f"üìã Processing {len(events)} events")
        
        for event in events:
            try:
                event_type = event.get("type")
                logger.info(f"üîÑ Processing event type: {event_type}")
                
                if event_type == "message" and event.get("message", {}).get("type") == "text":
                    user_text = event["message"]["text"].strip()
                    reply_token = event["replyToken"]
                    user_id = event.get("source", {}).get("userId", "unknown")
                    
                    logger.info(f"üë§ User {user_id}: {user_text}")
                    
                    welcome_keywords = ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ", "hello", "hi", "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞", "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏î‡∏µ‡∏à‡πâ‡∏≤", "‡πÄ‡∏£‡∏¥‡πà‡∏°"]
                    
                    if user_text.lower() in welcome_keywords:
                        # ÌôòÏòÅ Î©îÏãúÏßÄÎèÑ Ïñ∏Ïñ¥Î≥ÑÎ°ú Ï≤òÎ¶¨
                        user_lang = detect_user_language(user_text)
                        
                        if user_lang == 'thai':
                            response_text = """‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! üíï ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà SABOO THAILAND ‡∏Ñ‡πà‡∏∞

üß¥ ‡πÄ‡∏£‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏ö‡∏π‡πà‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏™‡∏ö‡∏π‡πà‡∏£‡∏π‡∏õ‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏Ñ‡πà‡∏∞

üìç ‡∏£‡πâ‡∏≤‡∏ô: ‡∏°‡∏¥‡∏Å‡∏ã‡πå ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏ä‡∏±‡πâ‡∏ô 2
üìû ‡πÇ‡∏ó‡∏£: 02-159-9880
üõí Shopee: shopee.co.th/thailandsoap
üåê ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: www.saboothailand.com

‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∞? üòä"""
                        elif user_lang == 'korean':
                            response_text = """ÏïàÎÖïÌïòÏÑ∏Ïöî! üíï SABOO THAILANDÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§!

üß¥ Ï†ÄÌù¨Îäî ÌÉúÍµ≠ ÏµúÏ¥àÎ°ú Í≥ºÏùº Î™®Ïñë Ï≤úÏó∞ ÎπÑÎàÑÎ•º ÎßåÎìúÎäî ÌöåÏÇ¨ÏûÖÎãàÎã§

üìç Îß§Ïû•: ÎØπÏä§ ÏßúÎöúÏßù, 2Ï∏µ
üìû Ï†ÑÌôî: 02-159-9880
üõí ÏáºÌîº: shopee.co.th/thailandsoap
üåê ÏõπÏÇ¨Ïù¥Ìä∏: www.saboothailand.com

Î¨¥ÏóáÏùÑ ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî? üòä"""
                        else:  # English
                            response_text = """Hello! üíï Welcome to SABOO THAILAND!

üß¥ We are Thailand's first company to create fruit-shaped natural soaps and bath products

üìç Store: Mixt Chatuchak, 2nd Floor
üìû Phone: 02-159-9880
üõí Shopee: shopee.co.th/thailandsoap
üåê Website: www.saboothailand.com

How can I help you today? üòä"""
                        
                        response_text = add_hyperlinks(response_text)
                    else:
                        response_text = get_gpt_response(user_text)
                    
                    # LINEÏùÄ HTMLÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏúºÎØÄÎ°ú HTML ÌÉúÍ∑∏ Ï†úÍ±∞
                    clean_response = re.sub(r'<[^>]+>', '', response_text)
                    
                    success = send_line_message(reply_token, clean_response)
                    
                    if success:
                        save_chat(user_text, clean_response[:100] + "...", user_id)
                    else:
                        logger.error(f"‚ùå Failed to send response to user {user_id}")
                
                elif event_type == "follow":
                    reply_token = event["replyToken"]
                    # ÏπúÍµ¨ Ï∂îÍ∞ÄÎèÑ ÏòÅÏñ¥ Ìè¥Î∞± ÏßÄÏõê
                    try:
                        welcome_text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° SABOO THAILAND ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞ üíï\n\n‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Ñ‡πà‡∏∞ üòä"
                        send_line_message(reply_token, welcome_text)
                    except Exception as e:
                        logger.error(f"‚ùå Error sending Thai welcome message: {e}")
                        # ÏòÅÏñ¥ Ìè¥Î∞±
                        english_welcome = "Hello! Thank you for adding SABOO THAILAND as a friend! üíï\n\nSend 'hello' to start chatting with us üòä"
                        send_line_message(reply_token, english_welcome)
                
                elif event_type == "unfollow":
                    user_id = event.get("source", {}).get("userId", "unknown")
                    logger.info(f"üëã User {user_id} unfollowed")
                
                else:
                    logger.info(f"‚ÑπÔ∏è Unhandled event type: {event_type}")
                    
            except Exception as e:
                logger.error(f"‚ùå Error processing event: {e}")
                continue
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"‚ùå LINE Webhook fatal error: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return "Error handled", 200

# ‚úÖ ÎåÄÌôî Î°úÍ∑∏ Ï†ÄÏû•
def save_chat(user_msg, bot_msg, user_id="anonymous"):
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        logger.info(f"üí¨ [{timestamp}] User({user_id[:8]}): {user_msg[:100]}...")
        logger.info(f"ü§ñ [{timestamp}] Bot: {bot_msg[:100]}...")
    except Exception as e:
        logger.error(f"‚ùå Failed to save chat log: {e}")

# ‚úÖ ÏóêÎü¨ Ìï∏Îì§Îü¨
@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"‚ùå Internal error: {error}")
    return jsonify({"error": "Server error"}), 500

# ‚úÖ Ïï± ÏãúÏûëÏãú Ìïú Î≤àÎßå Ï¥àÍ∏∞Ìôî (Flask 2.x+ Ìò∏Ìôò)
app_initialized = False

@app.before_request
def initialize_once():
    """Ïï± ÏãúÏûëÏãú Ìïú Î≤àÎßå Ï¥àÍ∏∞Ìôî Ïã§Ìñâ"""
    global app_initialized
    if not app_initialized:
        logger.info("üéØ Running one-time initialization...")
        initialize_google_data()
        setup_scheduler()
        app_initialized = True

# ‚úÖ Ïã§Ìñâ ÏãúÏûë
if __name__ == '__main__':
    # Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎäî ÏßÅÏ†ë Ï¥àÍ∏∞Ìôî
    if not os.getenv('RAILWAY_ENVIRONMENT'):
        logger.info("üöÄ Development mode - running direct initialization...")
        initialize_google_data()
        setup_scheduler()
        app_initialized = True
    
    # ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ìè¨Ìä∏ Ï∞æÍ∏∞
    default_port = int(os.environ.get("PORT", 5000))
    
    # Ìè¨Ìä∏ ÏÇ¨Ïö© Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('localhost', default_port))
        port = default_port
        logger.info(f"‚úÖ Port {port} is available")
    except OSError:
        port = find_free_port()
        logger.warning(f"‚ö†Ô∏è Port {default_port} is in use, using port {port} instead")
    
    debug_mode = not os.getenv('RAILWAY_ENVIRONMENT')
    
    logger.info(f"üöÄ Starting server on port {port}")
    logger.info(f"üîß Debug mode: {debug_mode}")
    logger.info(f"üîë LINE_TOKEN: {'‚úÖ Set' if LINE_TOKEN else '‚ùå Missing'}")
    logger.info(f"üîê LINE_SECRET: {'‚úÖ Set' if LINE_SECRET else '‚ùå Missing'}")
    logger.info(f"üìä Google Sheets ID: {'‚úÖ Set' if GOOGLE_SHEET_ID else '‚ùå Missing'}")
    logger.info(f"üìÑ Google Docs ID: {'‚úÖ Set' if GOOGLE_DOC_ID else '‚ùå Missing'}")
    logger.info(f"üîë Google API Key: {'‚úÖ Set' if GOOGLE_API_KEY else '‚ùå Missing'}")
    logger.info(f"üîê Google Credentials: {'‚úÖ Set' if GOOGLE_CREDENTIALS_JSON else '‚ùå Missing'}")
    logger.info(f"‚è∞ Update interval: {UPDATE_INTERVAL_MINUTES} minutes")
    
    # Google Sheets ÏÑ§Ï†ï Í∞ÄÏù¥Îìú
    if GOOGLE_SHEET_ID and GOOGLE_API_KEY:
        logger.info("üí° Google Sheets Setup Guide:")
        logger.info("   1. Go to your Google Sheet")
        logger.info("   2. Click 'Share' button")
        logger.info("   3. Change to 'Anyone with the link can view'")
        logger.info("   4. This allows the API key to access your sheet")
    
    try:
        app.run(host='0.0.0.0', port=port, debug=debug_mode)
    finally:
        # Ïï± Ï¢ÖÎ£åÏãú Ïä§ÏºÄÏ§ÑÎü¨ Ï†ïÎ¶¨
        if scheduler and scheduler.running:
            scheduler.shutdown()
            logger.info("üõë Scheduler shutdown completed") completion.choices[0].message.content.strip()
        response_text = add_hyperlinks(response_text)
        
        # Í∏∞Ïà†Ï†Å Î¨∏Ï†ú ÏïàÎÇ¥ Ï∂îÍ∞Ä
        if error_context:
            response_text += f"\n\n(Note: We're currently experiencing some technical issues with our data system, but I'm happy to help with basic information about SABOO THAILAND.)"
        
        return response_text
        
    except Exception as e:
        logger.error(f"‚ùå English fallback response error: {e}")
        return """I apologize for the technical difficulties we're experiencing.

SABOO THAILAND - Basic Information:
- Thailand's first fruit-shaped natural soap company (since 2008)
- Store: Mixt Chatuchak, 2nd Floor, Bangkok  
- Phone: 02-159-9880, 085-595-9565
- Website: www.saboothailand.com
- Shopee: shopee.co.th/thailandsoap
- Email: saboothailand@gmail.com

Products: Natural soaps, bath bombs, scrubs, essential oils, air fresheners

Please contact us directly or try again later. Thank you! üòä"""

def add_hyperlinks(text):
    """ÌÖçÏä§Ìä∏ÏóêÏÑú Ï†ÑÌôîÎ≤àÌò∏ÏôÄ URLÏùÑ ÌïòÏù¥ÌçºÎßÅÌÅ¨Î°ú Î≥ÄÌôò"""
    try:
        # 1. Ï†ÑÌôîÎ≤àÌò∏ Ìå®ÌÑ¥ Ï≤òÎ¶¨ (ÌïúÍµ≠, ÌÉúÍµ≠ ÌòïÏãù)
        phone_pattern = r'\b(0\d{1,2}-\d{3,4}-\d{4})\b'
        text = re.sub(phone_pattern, r'<a href="tel:\1" style="color: #ff69b4; text-decoration: underline;">\1</a>', text)
        
        # 2. Ïä¨ÎûòÏãú ÏóÜÎäî Ï†ÑÌôîÎ≤àÌò∏ÎèÑ Ï≤òÎ¶¨
        phone_pattern2 = r'\b(0\d{9,10})\b'
        text = re.sub(phone_pattern2, r'<a href="tel:\1" style="color: #ff69b4; text-decoration: underline;">\1</a>', text)
        
        # 3. URL Ìå®ÌÑ¥ Ï≤òÎ¶¨
        url_pattern = r'(https?://[^\s<>"\']+)'
        text = re.sub(url_pattern, r'<a href="\1" target="_blank" style="color: #ff69b4; text-decoration: underline;">\1</a>', text)
        
        # 4. wwwÎ°ú ÏãúÏûëÌïòÎäî ÎèÑÎ©îÏù∏ Ï≤òÎ¶¨
        www_pattern = r'\b(www\.[^\s<>"\']+)'
        text = re.sub(www_pattern, r'<a href="https://\1" target="_blank" style="color: #ff69b4; text-decoration: underline;">\1</a>', text)
        
        # 5. .com, .co.th Îì±ÏúºÎ°ú ÎÅùÎÇòÎäî ÎèÑÎ©îÏù∏ Ï≤òÎ¶¨
        domain_pattern = r'\b([a-zA-Z0-9-]+\.(com|co\.th|net|org|co\.kr))\b'
        def replace_domain(match):
            domain = match.group(1)
            if 'href=' in text[max(0, match.start()-20):match.start()]:
                return domain
            return f'<a href="https://{domain}" target="_blank" style="color: #ff69b4; text-decoration: underline;">{domain}</a>'
        
        text = re.sub(domain_pattern, replace_domain, text)
        
        return text
    except Exception as e:
        logger.error(f"‚ùå Hyperlink processing error: {e}")
        return text

# ‚úÖ LINE ÏÑúÎ™Ö Í≤ÄÏ¶ù Ìï®Ïàò
def verify_line_signature(body, signature):
    """LINE Webhook ÏÑúÎ™Ö Í≤ÄÏ¶ù"""
    try:
        import hmac
        import base64
        
        if not LINE_SECRET:
            logger.warning("‚ö†Ô∏è LINE_SECRET not set, skipping signature verification")
            return True
            
        hash = hmac.new(LINE_SECRET.encode('utf-8'), body, hashlib.sha256).digest()
        expected_signature = base64.b64encode(hash).decode('utf-8')
        
        return signature == expected_signature
    except Exception as e:
        logger.error(f"‚ùå Signature verification error: {e}")
        return False

# ‚úÖ GPT ÏùëÎãµ ÏÉùÏÑ± Ìï®Ïàò (ÏóÖÎç∞Ïù¥Ìä∏Îêú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö© + ÏòÅÏñ¥ Ìè¥Î∞±)
def get_gpt_response(user_message):
    """OpenAI GPTÎ°ú ÏùëÎãµ ÏÉùÏÑ± - ÏµúÏã† Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö© + ÏòÅÏñ¥ Ìè¥Î∞±"""
    user_language = detect_user_language(user_message)
    
    try:
        if not client:
            logger.error("‚ùå OpenAI client not available")
            return get_english_fallback_response(user_message, "OpenAI service unavailable")
        
        # Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        if not current_sheet_text or len(current_sheet_text.strip()) < 50:
            logger.warning("‚ö†Ô∏è Sheet data seems insufficient, using fallback")
            return get_english_fallback_response(user_message, "Product data temporarily unavailable")
        
        # ÏµúÏã† Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
        prompt = f"""
[Product Info - Last Updated: {last_update_time.strftime('%Y-%m-%d %H:%M:%S')}]
{current_sheet_text[:5000]}

[Company Info - Last Updated: {last_update_time.strftime('%Y-%m-%d %H:%M:%S')}]  
{current_doc_text[:5000]}

[User Language Detected: {user_language}]
[User]
{user_message}
"""
        
        completion = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": SYSTEM_MESSAGE},
                {"role": "user", "content": prompt}
            ],
            max_tokens=800,
            temperature=0.7,
            timeout=25
        )
        
        response_text =