from flask import Flask, request, jsonify, render_template
from openai import OpenAI
from datetime import datetime
from dotenv import load_dotenv
import os
import logging
import requests

# ‚úÖ .env Î°úÎìú
load_dotenv()

# ‚úÖ Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚úÖ ÌôòÍ≤Ω ÌôïÏù∏ Î°úÍ∑∏
if os.getenv('RAILWAY_ENVIRONMENT'):
    logger.info("‚úÖ Running in Railway production environment")
else:
    logger.info("‚úÖ Running in local development environment")

# ‚úÖ Flask Ïï± Ï¥àÍ∏∞Ìôî
app = Flask(__name__)

# ‚úÖ OpenAI ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÑ§Ï†ï
try:
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if not openai_api_key:
        raise ValueError("Missing OPENAI_API_KEY")
    client = OpenAI(api_key=openai_api_key)
    logger.info("‚úÖ OpenAI client initialized successfully")
except Exception as e:
    logger.error(f"‚ùå OpenAI client initialization failed: {e}")
    client = None

# ‚úÖ Google ÏãúÌä∏ Î∞è Î¨∏ÏÑú Í∏∞Î≥∏ Ï†ïÎ≥¥
saboo_thai_info = """
SABOO THAILAND ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå - ‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó:
- SABOO THAILAND ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏™‡∏ö‡∏π‡πà‡∏£‡∏π‡∏õ‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
- ‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏õ‡∏µ 2008 ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏ö‡∏π‡πà‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢
- ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏•‡∏Å‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏Å‡∏ß‡πà‡∏≤ 20 ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å

‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤:
- ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà (‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô): 55/20 ‡∏´‡∏°‡∏π‡πà 4 ‡∏ï‡∏≥‡∏ö‡∏•‡∏ö‡∏∂‡∏á‡∏Ñ‡∏≥‡∏û‡∏£‡πâ‡∏≠‡∏¢ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏•‡∏≥‡∏•‡∏π‡∏Å‡∏Å‡∏≤ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ 12150
- SABOO THAILAND SHOP: ‡∏°‡∏¥‡∏Å‡∏ã‡πå ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏ä‡∏±‡πâ‡∏ô 2 ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 8 ‡∏ñ‡∏ô‡∏ô‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£ 3 ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10900
- ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: 02-159-9880, 085-595-9565 / 062-897-8962

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:
- ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: saboothailand@gmail.com
- ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: www.saboothailand.com
- ‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡∏°‡∏≠‡∏•‡∏•‡πå: www.saboomall.com

‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå:
- Shopee: https://shopee.co.th/thailandsoap
- Lazada: https://www.lazada.co.th/shop/saboo-thailand
- YouTube: https://www.youtube.com/@saboothailand.official
- Instagram: https://www.instagram.com/saboothailand.official/
- TikTok: https://www.tiktok.com/@saboothailand.official
- ‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å: https://books.saboothailand.com/books/bxte/#p=1

‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏´‡∏•‡∏±‡∏Å:
- ‡∏™‡∏ö‡∏π‡πà‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ (‡∏™‡∏ö‡∏π‡πà‡∏£‡∏π‡∏õ‡∏ú‡∏•‡πÑ‡∏°‡πâ)
- ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥ (‡∏ö‡∏≤‡∏ò‡∏ö‡∏≠‡∏°‡∏ö‡πå ‡∏ö‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏ö‡∏≤‡∏ò)
- ‡∏™‡πÄ‡∏õ‡∏£‡∏¢‡πå‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
- ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Å‡∏•‡∏¥‡πà‡∏ô
- ‡∏™‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ä‡∏∏‡∏î‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥
"""

sheet_text = saboo_thai_info
doc_text = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö SABOO THAILAND"

try:
    from chatbot_utils import load_sheet, load_doc
    loaded_sheet = load_sheet()
    loaded_doc = load_doc()
    if loaded_sheet and len(loaded_sheet.strip()) > 50:
        sheet_text = loaded_sheet
    if loaded_doc and len(loaded_doc.strip()) > 50:
        doc_text = loaded_doc
    logger.info("‚úÖ Google Sheets and Docs loaded successfully")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Google API Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®, Í∏∞Î≥∏ ÌÉúÍµ≠Ïñ¥ Ï†ïÎ≥¥ ÏÇ¨Ïö©: {e}")

# ‚úÖ GPT ÏãúÏä§ÌÖú Î©îÏãúÏßÄ
SYSTEM_MESSAGE = """
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏Ç‡∏≠‡∏á SABOO THAILAND ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏ç‡∏¥‡∏á‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏µ
‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏™‡∏°‡∏≠ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∞‡πÑ‡∏£
‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏ç‡∏¥‡∏á‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏Ñ‡πà‡∏∞" "‡∏Ñ‡∏∞" ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£
‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤ ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥:
- SABOO THAILAND ‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏õ‡∏µ 2008 ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏ö‡∏π‡πà‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
- ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏™‡∏ö‡∏π‡πà‡∏£‡∏π‡∏õ‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡πÑ‡∏ó‡∏¢
- ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏Å‡∏ß‡πà‡∏≤ 20 ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
- ‡∏£‡πâ‡∏≤‡∏ô: ‡∏°‡∏¥‡∏Å‡∏ã‡πå ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏ä‡∏±‡πâ‡∏ô 2
- ‡πÇ‡∏ó‡∏£: 02-159-9880, 085-595-9565
- ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: www.saboothailand.com
- Shopee: shopee.co.th/thailandsoap

‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:
- ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡∏ö‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏°‡∏¥‡∏Å‡∏ã‡πå ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡πÅ‡∏•‡∏∞‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ
- ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‚Üí ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Shopee, Lazada, ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
- ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå ‚Üí ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏ö‡∏π‡πà‡∏£‡∏π‡∏õ‡∏ú‡∏•‡πÑ‡∏°‡πâ, ‡∏ö‡∏≤‡∏ò‡∏ö‡∏≠‡∏°‡∏ö‡πå, ‡∏™‡∏Ñ‡∏£‡∏±‡∏ö
- ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ‚Üí ‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•
"""

# ‚úÖ LINE Flex Message ÌÖúÌîåÎ¶ø ÏÉùÏÑ± Ìï®Ïàò
def create_flex_message(bot_response, user_message=""):
    """LINE Flex Message Ìè¨Îß∑ÏúºÎ°ú ÏùëÎãµ ÏÉùÏÑ±"""
    
    # ÏùëÎãµ Í∏∏Ïù¥Ïóê Îî∞Îùº Îã§Î•∏ ÌÖúÌîåÎ¶ø ÏÇ¨Ïö©
    if len(bot_response) > 800:
        return create_long_response_flex(bot_response)
    else:
        return create_standard_response_flex(bot_response)

def create_standard_response_flex(bot_response):
    """ÌëúÏ§Ä ÏùëÎãµÏö© Flex Message"""
    return {
        "type": "flex",
        "altText": "SABOO THAILAND ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°",
        "contents": {
            "type": "bubble",
            "size": "kilo",
            "header": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üß¥ SABOO THAILAND",
                                "weight": "bold",
                                "size": "lg",
                                "color": "#2E7D32",
                                "flex": 1
                            },
                            {
                                "type": "text",
                                "text": "üíï",
                                "size": "lg",
                                "align": "end"
                            }
                        ]
                    }
                ],
                "backgroundColor": "#FFE4E6",
                "paddingAll": "15px",
                "spacing": "md"
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": bot_response,
                        "wrap": True,
                        "size": "md",
                        "color": "#333333",
                        "lineSpacing": "sm"
                    }
                ],
                "paddingAll": "20px",
                "spacing": "md"
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "button",
                                "style": "link",
                                "height": "sm",
                                "action": {
                                    "type": "postback",
                                    "label": "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå",
                                    "data": "action=product_inquiry"
                                },
                                "color": "#E91E63"
                            },
                            {
                                "type": "button",
                                "style": "link",
                                "height": "sm",
                                "action": {
                                    "type": "uri",
                                    "label": "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå",
                                    "uri": "https://www.saboothailand.com"
                                },
                                "color": "#2E7D32"
                            }
                        ],
                        "spacing": "sm",
                        "margin": "md"
                    }
                ],
                "paddingAll": "15px"
            }
        }
    }

def create_long_response_flex(bot_response):
    """Í∏¥ ÏùëÎãµÏö© Carousel Flex Message"""
    # ÏùëÎãµÏùÑ Ï†ÅÏ†àÌïú Í∏∏Ïù¥Î°ú Î∂ÑÌï†
    chunks = split_response(bot_response, 600)
    
    bubbles = []
    for i, chunk in enumerate(chunks):
        bubble = {
            "type": "bubble",
            "size": "kilo",
            "header": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": f"üß¥ SABOO THAILAND ({i+1}/{len(chunks)})",
                        "weight": "bold",
                        "size": "lg",
                        "color": "#2E7D32"
                    }
                ],
                "backgroundColor": "#FFE4E6",
                "paddingAll": "15px"
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": chunk,
                        "wrap": True,
                        "size": "md",
                        "color": "#333333",
                        "lineSpacing": "sm"
                    }
                ],
                "paddingAll": "20px"
            }
        }
        
        # ÎßàÏßÄÎßâ bubbleÏóêÎßå footer Ï∂îÍ∞Ä
        if i == len(chunks) - 1:
            bubble["footer"] = {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "button",
                                "style": "link",
                                "height": "sm",
                                "action": {
                                    "type": "postback",
                                    "label": "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                                    "data": "action=more_inquiry"
                                },
                                "color": "#E91E63"
                            },
                            {
                                "type": "button",
                                "style": "link",
                                "height": "sm",
                                "action": {
                                    "type": "uri",
                                    "label": "‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å",
                                    "uri": "https://books.saboothailand.com/books/bxte/#p=1"
                                },
                                "color": "#2E7D32"
                            }
                        ],
                        "spacing": "sm",
                        "margin": "md"
                    }
                ],
                "paddingAll": "15px"
            }
        
        bubbles.append(bubble)
    
    return {
        "type": "flex",
        "altText": "SABOO THAILAND ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
        "contents": {
            "type": "carousel",
            "contents": bubbles
        }
    }

def create_quick_reply_buttons():
    """ÏûêÏ£º Î¨ªÎäî ÏßàÎ¨∏ Îπ†Î•∏ ÎãµÎ≥Ä Î≤ÑÌäº"""
    return [
        {
            "type": "action",
            "action": {
                "type": "message",
                "label": "‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á",
                "text": "‡∏°‡∏µ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏∞"
            }
        },
        {
            "type": "action", 
            "action": {
                "type": "message",
                "label": "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô",
                "text": "‡∏£‡πâ‡∏≤‡∏ô SABOO ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏Ñ‡∏∞"
            }
        },
        {
            "type": "action",
            "action": {
                "type": "message", 
                "label": "‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
                "text": "‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏Ñ‡∏∞"
            }
        },
        {
            "type": "action",
            "action": {
                "type": "uri",
                "label": "Shopee",
                "uri": "https://shopee.co.th/thailandsoap"
            }
        }
    ]

def split_response(text, max_length):
    """ÏùëÎãµÏùÑ Ï†ÅÏ†àÌïú Í∏∏Ïù¥Î°ú Î∂ÑÌï†"""
    if len(text) <= max_length:
        return [text]
    
    chunks = []
    current_chunk = ""
    
    sentences = text.split('. ')
    for sentence in sentences:
        if len(current_chunk + sentence + '. ') <= max_length:
            current_chunk += sentence + '. '
        else:
            if current_chunk:
                chunks.append(current_chunk.strip())
                current_chunk = sentence + '. '
            else:
                # Îã®Ïùº Î¨∏Ïû•Ïù¥ ÎÑàÎ¨¥ Í∏¥ Í≤ΩÏö∞
                chunks.append(sentence[:max_length] + '...')
    
    if current_chunk:
        chunks.append(current_chunk.strip())
    
    return chunks

def create_welcome_message():
    """ÌôòÏòÅ Î©îÏãúÏßÄÏö© Flex Message"""
    return {
        "type": "flex",
        "altText": "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà SABOO THAILAND ‡∏Ñ‡πà‡∏∞!",
        "contents": {
            "type": "bubble",
            "hero": {
                "type": "image",
                "url": "https://via.placeholder.com/1040x585/E91E63/FFFFFF?text=SABOO+THAILAND+üß¥",
                "size": "full",
                "aspectRatio": "20:13",
                "aspectMode": "cover"
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "üß¥ SABOO THAILAND",
                        "weight": "bold",
                        "size": "xl",
                        "color": "#2E7D32"
                    },
                    {
                        "type": "text",
                        "text": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! üíï ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏™‡∏ö‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡πà‡∏∞",
                        "size": "sm",
                        "color": "#666666",
                        "margin": "md",
                        "wrap": True
                    },
                    {
                        "type": "separator",
                        "margin": "lg"
                    },
                    {
                        "type": "text",
                        "text": "üåü ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤",
                        "weight": "bold",
                        "margin": "lg",
                        "color": "#2E7D32"
                    },
                    {
                        "type": "text",
                        "text": "‚Ä¢ ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå\n‚Ä¢ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ\n‚Ä¢ ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏£‡∏û‡∏Ñ‡∏∏‡∏ì\n‚Ä¢ ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠\n‚Ä¢ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏¥‡∏ß",
                        "size": "sm",
                        "margin": "md",
                        "wrap": True
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "margin": "lg",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üìç ‡∏£‡πâ‡∏≤‡∏ô: ‡∏°‡∏¥‡∏Å‡∏ã‡πå ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏ä‡∏±‡πâ‡∏ô 2",
                                "size": "xs",
                                "color": "#888888"
                            },
                            {
                                "type": "text", 
                                "text": "üìû ‡πÇ‡∏ó‡∏£: 02-159-9880",
                                "size": "xs",
                                "color": "#888888"
                            },
                            {
                                "type": "text",
                                "text": "üõí Shopee: shopee.co.th/thailandsoap",
                                "size": "xs", 
                                "color": "#888888"
                            }
                        ]
                    }
                ],
                "spacing": "sm",
                "paddingAll": "20px"
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "button",
                        "style": "primary",
                        "height": "sm",
                        "action": {
                            "type": "message",
                            "label": "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå",
                            "text": "‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏Ñ‡πà‡∏∞"
                        },
                        "color": "#E91E63"
                    },
                    {
                        "type": "button",
                        "style": "link",
                        "height": "sm",
                        "action": {
                            "type": "uri",
                            "label": "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå SABOO",
                            "uri": "https://www.saboothailand.com"
                        }
                    }
                ],
                "spacing": "sm",
                "paddingAll": "20px"
            }
        }
    }

# ‚úÖ Ïù∏Îç±Ïä§ ÎùºÏö∞Ìä∏
@app.route('/')
def index():
    return "<h1>Saboo Thailand Chatbot is running.</h1>"

# ‚úÖ Ïõπ Ï±ó ÎùºÏö∞Ìä∏
@app.route('/chat', methods=['POST'])
def chat():
    try:
        if not client:
            return jsonify({"error": "OpenAI not available."}), 500

        user_message = request.json.get('message', '').strip()
        if not user_message:
            return jsonify({"error": "Empty message."}), 400

        prompt = f"""
[Product Info]
{sheet_text[:5000]}

[Company Info]
{doc_text[:5000]}

[User]
{user_message}
"""

        completion = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": SYSTEM_MESSAGE},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1000,
            temperature=0.7
        )

        bot_response = completion.choices[0].message.content.strip()
        save_chat(user_message, bot_response)

        return jsonify({"reply": bot_response})

    except Exception as e:
        logger.error(f"‚ùå Error in /chat: {e}")
        return jsonify({"error": "Internal error."}), 500

# ‚úÖ LINE Ï±óÎ¥á Webhook
@app.route('/line', methods=['POST'])
def line_webhook():
    try:
        body = request.json
        events = body.get("events", [])

        for event in events:
            if event.get("type") == "message" and event["message"]["type"] == "text":
                user_text = event["message"]["text"].strip()
                reply_token = event["replyToken"]
                user_id = event["source"]["userId"]

                # ÌôòÏòÅ Î©îÏãúÏßÄ Ï≤òÎ¶¨
                if user_text.lower() in ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ", "hello", "hi", "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞", "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏î‡∏µ‡∏à‡πâ‡∏≤", "‡πÄ‡∏£‡∏¥‡πà‡∏°"]:
                    flex_message = create_welcome_message()
                    payload = {
                        "replyToken": reply_token,
                        "messages": [flex_message]
                    }
                else:
                    # ÏùºÎ∞ò ÏßàÎ¨∏ Ï≤òÎ¶¨ - OpenAI ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÌôïÏù∏
                    if not client:
                        simple_message = {
                            "type": "text",
                            "text": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞ üôè"
                        }
                        payload = {
                            "replyToken": reply_token,
                            "messages": [simple_message]
                        }
                    else:
                        # GPT ÏùëÎãµ ÏÉùÏÑ±
                        prompt = f"""
[Product Info]
{sheet_text[:5000]}

[Company Info]
{doc_text[:5000]}

[User]
{user_text}
"""

                        completion = client.chat.completions.create(
                            model="gpt-4o",
                            messages=[
                                {"role": "system", "content": SYSTEM_MESSAGE},
                                {"role": "user", "content": prompt}
                            ],
                            max_tokens=1000,
                            temperature=0.7
                        )

                        bot_response = completion.choices[0].message.content.strip()
                        flex_message = create_flex_message(bot_response, user_text)
                        
                        # Quick Reply Î≤ÑÌäº Ï∂îÍ∞Ä (ÌäπÏ†ï ÌÇ§ÏõåÎìúÏóê ÎåÄÌï¥)
                        if any(keyword in user_text.lower() for keyword in ["‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Ç‡∏≤‡∏¢", "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£"]):
                            # Ï†úÌíà Í¥ÄÎ†® ÏßàÎ¨∏ÏóêÎäî Quick Reply Ï∂îÍ∞Ä
                            payload = {
                                "replyToken": reply_token,
                                "messages": [flex_message],
                                "quickReply": {
                                    "items": create_quick_reply_buttons()
                                }
                            }
                        else:
                            payload = {
                                "replyToken": reply_token,
                                "messages": [flex_message]
                            }

                save_chat(user_text, "Flex message sent", user_id)

                # LINE APIÎ°ú ÏùëÎãµ Ï†ÑÏÜ°
                line_token = os.getenv("LINE_CHANNEL_ACCESS_TOKEN") or os.getenv("LINE_TOKEN", "")
                if not line_token:
                    logger.error("‚ùå LINE_CHANNEL_ACCESS_TOKEN not found!")
                    return "Error: Missing LINE token", 500
                    
                headers = {
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {line_token}"
                }

                response = requests.post(
                    "https://api.line.me/v2/bot/message/reply", 
                    headers=headers, 
                    json=payload,
                    timeout=30
                )
                
                if response.status_code != 200:
                    logger.error(f"‚ùå LINE API Error: {response.status_code} - {response.text}")
                else:
                    logger.info(f"‚úÖ Message sent successfully to user {user_id}")
                
            elif event.get("type") == "postback":
                # Postback Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
                postback_data = event["postback"]["data"]
                reply_token = event["replyToken"]
                user_id = event["source"]["userId"]
                
                handle_postback(postback_data, reply_token, user_id)

        return "OK", 200
    except Exception as e:
        logger.error(f"‚ùå LINE Webhook Error: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return "Error", 500

def handle_postback(data, reply_token, user_id):
    """Postback Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨"""
    try:
        line_token = os.getenv("LINE_CHANNEL_ACCESS_TOKEN") or os.getenv("LINE_TOKEN", "")
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {line_token}"
        }
        
        if "action=product_inquiry" in data:
            message = {
                "type": "text",
                "text": "‡∏°‡∏µ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏∞? ‡∏ö‡∏≠‡∏Å‡∏î‡∏¥‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞! üòä\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô:\n‚Ä¢ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏ö‡∏≤‡∏ò‡∏ö‡∏≠‡∏°‡∏ö‡πå\n‚Ä¢ ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏ß‡πÅ‡∏û‡πâ‡∏á‡πà‡∏≤‡∏¢\n‚Ä¢ ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏™‡∏ö‡∏π‡πà\n‚Ä¢ ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠\n‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤"
            }
        elif "action=more_inquiry" in data:
            message = {
                "type": "text", 
                "text": "‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡πà‡∏∞! üíï\n\n‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤:\nüìß saboothailand@gmail.com\nüìû 02-159-9880\nüåê www.saboothailand.com\n\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞! üòä"
            }
        else:
            message = {
                "type": "text",
                "text": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä"
            }
        
        payload = {
            "replyToken": reply_token,
            "messages": [message]
        }
        
        requests.post(
            "https://api.line.me/v2/bot/message/reply",
            headers=headers,
            json=payload,
            timeout=30
        )
        
        save_chat(f"Postback: {data}", f"Response sent", user_id)
        
    except Exception as e:
        logger.error(f"‚ùå Postback handling error: {e}")

# ‚úÖ ÎåÄÌôî Î°úÍ∑∏ Ï†ÄÏû• (user_id Ìè¨Ìï®)
def save_chat(user_msg, bot_msg, user_id="anonymous"):
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        logger.info(f"[LINE CHAT] {timestamp} | User({user_id}): {user_msg}")
        logger.info(f"[LINE CHAT] {timestamp} | Bot: {bot_msg}")
    except Exception as e:
        logger.error(f"‚ùå Failed to save chat log: {e}")

# ‚úÖ Ìó¨Ïä§Ï≤¥ÌÅ¨
@app.route('/health')
def health():
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "openai": "connected" if client else "disconnected"
    })

# ‚úÖ ÏóêÎü¨ Ìï∏Îì§Îü¨
@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"‚ùå Internal error: {error}")
    return jsonify({"error": "Server error"}), 500

# ‚úÖ Ïã§Ìñâ ÏãúÏûë
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5001))
    debug_mode = not os.getenv('RAILWAY_ENVIRONMENT')
    logger.info(f"üöÄ Starting server on port {port}")
    app.run(host='0.0.0.0', port=port, debug_debug_mode)